---
// Project data
const projects = [
  {
    id: 1,
    title: "Immersive 3D Portfolio",
    description:
      "A portfolio website utilizing ThreeJS and interactive 3D elements to showcase creative work.",
    image: "/projects/project1.jpg",
    tags: ["ThreeJS", "WebGL", "GSAP"],
    link: "#",
  },
  {
    id: 2,
    title: "E-Commerce App",
    description:
      "A fully functional e-commerce platform with product management, cart, and checkout system.",
    image: "/projects/project2.jpg",
    tags: ["React", "Node.js", "MongoDB"],
    link: "#",
  },
  {
    id: 3,
    title: "AI Content Generator",
    description:
      "Web application that uses machine learning to generate unique content based on user inputs.",
    image: "/projects/project3.jpg",
    tags: ["Python", "TensorFlow", "React"],
    link: "#",
  },
  {
    id: 4,
    title: "Social Media Dashboard",
    description:
      "Analytics dashboard showing metrics from multiple social media platforms in real-time.",
    image: "/projects/project4.jpg",
    tags: ["Vue.js", "D3.js", "Firebase"],
    link: "#",
  },
  {
    id: 5,
    title: "Mobile Fitness App",
    description:
      "Cross-platform fitness application with workout tracking, nutrition plans, and social features.",
    image: "/projects/project5.jpg",
    tags: ["React Native", "GraphQL", "AWS"],
    link: "#",
  },
];
---

<section id="projects" class="projects-section">
  <div class="container">
    <div class="section-header">
      <h2>Recent Projects</h2>
      <p>A selection of my recent work and side projects</p>
    </div>

    <div class="carousel-container">
      <div class="carousel">
        {
          projects.map((project) => (
            <div class="project-card" data-id={project.id}>
              <div class="project-image">
                <img src={project.image} alt={project.title} />
              </div>
              <div class="project-content">
                <h3>{project.title}</h3>
                <p>{project.description}</p>
                <div class="project-tags">
                  {project.tags.map((tag) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
                <a href={project.link} class="btn project-btn">
                  Learn More
                </a>
              </div>
            </div>
          ))
        }
      </div>

      <div class="carousel-controls">
        <button class="prev-btn" aria-label="Previous">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"><path d="M15 18l-6-6 6-6"></path></svg
          >
        </button>
        <div class="carousel-dots">
          {
            projects.map((project) => (
              <button
                class="dot"
                data-id={project.id}
                aria-label={`Go to project ${project.id}`}
              />
            ))
          }
        </div>
        <button class="next-btn" aria-label="Next">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"><path d="M9 18l6-6-6-6"></path></svg
          >
        </button>
      </div>
    </div>
  </div>
</section>

<style>
  .projects-section {
    background-color: var(--secondary-color);
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    padding: 5rem 0;
    z-index: 2;
    will-change: opacity, transform;
    opacity: 1;
    transform: translateY(0);
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-header h2 {
    margin-bottom: 1rem;
    position: relative;
    display: inline-block;
  }

  .section-header h2::after {
    content: "";
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 50px;
    height: 3px;
    background-color: var(--accent-color);
  }

  .carousel-container {
    position: relative;
    max-width: 90%;
    margin: 0 auto;
    perspective: 1000px;
  }

  .carousel {
    position: relative;
    height: 450px;
    transform-style: preserve-3d;
    margin-bottom: 3rem;
  }

  .project-card {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    max-width: 350px;
    height: 450px;
    border-radius: 10px;
    background-color: white;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transform-style: preserve-3d;
    transition: all 0.5s ease;
    opacity: 0;
    visibility: hidden;
    transform: translateZ(-400px) translateX(-200px) rotateY(-45deg);
  }

  .project-card.active {
    opacity: 1;
    visibility: visible;
    transform: translateZ(0) translateX(0) rotateY(0);
    z-index: 10;
  }

  .project-card.prev,
  .project-card.next {
    opacity: 0.7;
    visibility: visible;
    pointer-events: none;
  }

  .project-card.prev {
    transform: translateZ(-150px) translateX(-150px) rotateY(-30deg);
    z-index: 5;
  }

  .project-card.next {
    transform: translateZ(-150px) translateX(150px) rotateY(30deg);
    z-index: 5;
  }

  .project-image {
    height: 200px;
    overflow: hidden;
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .project-card:hover .project-image img {
    transform: scale(1.05);
  }

  .project-content {
    padding: 1.5rem;
  }

  .project-content h3 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
  }

  .project-content p {
    font-size: 0.9rem;
    margin-bottom: 1rem;
    color: #666;
  }

  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .tag {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    background-color: #f0f0f0;
    border-radius: 4px;
    color: #555;
  }

  .project-btn {
    font-size: 0.9rem;
    padding: 0.5rem 1rem;
  }

  .carousel-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1.5rem;
  }

  .prev-btn,
  .next-btn {
    background: none;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .prev-btn:hover,
  .next-btn:hover {
    background-color: var(--accent-color);
    color: white;
    transform: translateY(-2px);
  }

  .prev-btn svg,
  .next-btn svg {
    width: 20px;
    height: 20px;
  }

  .carousel-dots {
    display: flex;
    gap: 0.5rem;
  }

  .dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #ccc;
    border: none;
    padding: 0;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .dot.active {
    background-color: var(--accent-color);
    transform: scale(1.2);
  }

  @media (max-width: 768px) {
    .carousel {
      height: 400px;
    }

    .project-card {
      height: 400px;
      max-width: 300px;
    }

    .project-image {
      height: 160px;
    }
  }
</style>

<script>
  import { gsap } from "gsap";

  class ProjectCarousel {
    constructor() {
      this.carousel = document.querySelector(".carousel");
      this.cards = Array.from(document.querySelectorAll(".project-card"));
      this.prevBtn = document.querySelector(".prev-btn");
      this.nextBtn = document.querySelector(".next-btn");
      this.dots = Array.from(document.querySelectorAll(".dot"));

      this.totalCards = this.cards.length;
      this.currentIndex = 0;

      this.init();
    }

    init() {
      // Set initial state
      this.updateCarousel();

      // Add event listeners
      this.prevBtn?.addEventListener("click", () => this.goToPrev());
      this.nextBtn?.addEventListener("click", () => this.goToNext());

      this.dots.forEach((dot, index) => {
        dot.addEventListener("click", () => this.goToIndex(index));
      });

      // Add auto-rotation
      this.autoRotateInterval = setInterval(() => this.goToNext(), 5000);

      // Pause rotation on hover
      this.carousel?.addEventListener("mouseenter", () => {
        clearInterval(this.autoRotateInterval);
      });

      this.carousel?.addEventListener("mouseleave", () => {
        this.autoRotateInterval = setInterval(() => this.goToNext(), 5000);
      });

      // Add touch/swipe support
      this.setupSwipeSupport();
    }

    updateCarousel() {
      this.cards.forEach((card, index) => {
        const prevIndex =
          (this.currentIndex - 1 + this.totalCards) % this.totalCards;
        const nextIndex = (this.currentIndex + 1) % this.totalCards;

        // Remove all classes
        card.classList.remove("active", "prev", "next");

        if (index === this.currentIndex) {
          card.classList.add("active");
        } else if (index === prevIndex) {
          card.classList.add("prev");
        } else if (index === nextIndex) {
          card.classList.add("next");
        }
      });

      // Update dots
      this.dots.forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.classList.add("active");
        } else {
          dot.classList.remove("active");
        }
      });
    }

    goToPrev() {
      this.currentIndex =
        (this.currentIndex - 1 + this.totalCards) % this.totalCards;
      this.updateCarousel();
    }

    goToNext() {
      this.currentIndex = (this.currentIndex + 1) % this.totalCards;
      this.updateCarousel();
    }

    goToIndex(index) {
      this.currentIndex = index;
      this.updateCarousel();
    }

    setupSwipeSupport() {
      if (!this.carousel) return;

      let touchStartX = 0;
      let touchEndX = 0;

      this.carousel.addEventListener(
        "touchstart",
        (e) => {
          touchStartX = e.changedTouches[0].screenX;
        },
        { passive: true }
      );

      this.carousel.addEventListener(
        "touchend",
        (e) => {
          touchEndX = e.changedTouches[0].screenX;
          this.handleSwipe(touchStartX, touchEndX);
        },
        { passive: true }
      );
    }

    handleSwipe(startX, endX) {
      const difference = startX - endX;
      const threshold = 50;

      if (difference > threshold) {
        // Swipe left, go to next
        this.goToNext();
      } else if (difference < -threshold) {
        // Swipe right, go to prev
        this.goToPrev();
      }
    }
  }

  // Initialize carousel when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new ProjectCarousel();
  });
</script>
